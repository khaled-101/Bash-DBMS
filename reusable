function check_for_empty_string {
  if [ -z $1 ]
  then
    echo true
  else
    echo false
  fi
}

function check_special_char () {
  x=$*
  if [[ $x =~ [\!\'\"\^\\[\#\`\~\$\%\=\+\<\>\|\:\ \(\)\@\;\?\&\*\\\/]+ ]]
  then
    echo true
  else
    echo false
  fi
}

function check_if_name_starts_with_number () {
  if [[ $1 =~ ^[0-9] ]]
  then
    echo true
  else
    echo false
  fi
}

function check_if_dir_exists {
	if [ -d "$*" ];
	then
		echo true
	else
		echo false
	fi
}

function listDbs() {
  local database_list=$(ls Databases/)

  selected_db=$(yad --list --width=300 --height=250 \
    --title="List of Databases" \
    --text="Choose a DB to connect to:" \
    --column="Databases" $database_list)

  if [ $? -eq 1 ] || [ -z "$selected_db" ]; then
    DBmenu
    return
  fi

  selected_db=$(echo "$selected_db" | awk -F'|' '{print $1}')

  yad --question --width=400 --height=100 --text="Do you want to connect to '$selected_db'?"
  response=$?

  if [ $response -eq 0 ]; then
    connect_to_database "$selected_db"
  else
    yad --info --width=400 --height=100 --text="You chose not to connect to any database."
    DBmenu
  fi
}

function connect_to_database() {
  db_name="$1"
  
  db_name=$(echo "$db_name"  | awk -F'|' '{print $1}')

  cd "Databases/$db_name" || { echo "Failed to change directory."; return; }

  yad --info --width=400 --height=100 --text="Connected to the database: $db_name"
  echo "Current directory: $(pwd)"
  source ../../Table_menu $db_name
}

function listTables() {
    current_dir=$(pwd)
    local Dbname=$(basename "$current_dir")
    local table_list=$(ls "$current_dir")

    selected_tb=$(yad --list --width=300 --height=250 \
        --title="Table list for $Dbname DB" \
        --text="Tables inside this Database:" \
        --column="Tables" $table_list)

    if [ -z "$table_list" ]; then
    yad --error --width=300 --text="No tables found in the current database."
    Menu_Table $Dbname
    return
    fi

    if [ $? -eq 1 ]; then
        Menu_Table $Dbname
        return
    fi
}

function isNumber {
  if [[ $* =~ ^[1-9][0-9]*$ ]]; then
    echo "true"
  else
    echo "false"
  fi
}

function check_repeated_columns {
  columns=("$@")

  declare -A column_counts

  for column in "${columns[@]}"; do
    ((column_counts["$column"]++))
  done

  for column in "${!column_counts[@]}"; do
    if [ "${column_counts[$column]}" -gt 1 ]; then
      yad --error --width=400 --height=100  --text="You Can't Have 2 Columns with the Same Name"
      return 1
    fi
  done

  return 0
}

function Select_Table(){
  local type=$1

  if [ "$type" == "All" ]; then
    Select_All
  elif [ "$type" == "Columns" ]; then
    Select_Selected_Columns
  fi
}

function Select_All() {
  current_dir=$(pwd)
  local Dbname=$(basename "$current_dir")
  local table_list=$(ls "$current_dir")
  
  selected_table=$(yad --list --width=300 --height=250  \
    --title="List of Tables in $Dbname" \
    --text="Choose a Table:" \
    --column="Tables" $table_list)

  if [ $? -eq 1 ]; then
    Table_menu "$Dbname"
  fi
  
  selected_table=$(echo "$selected_table" | awk -F'|' '{print $1}')
  data_file="../$Dbname/$selected_table/$selected_table"
  
  headers=$(awk -F: 'NR>3 {print $1}' "$data_file.meta")
  nfields=$(awk -F: 'NR==2 {print $2}' "$data_file.meta")
  pk=$(awk -F: '$3 == "y" {print $1}' "$data_file.meta")

  for header in $headers; do
    printf "%-15s" "$header"
  done
  echo 
  for header in $headers; do
    printf "%-15s" "---------------"
  done
  echo
  while IFS= read -r line || [[ -n "$line" ]]; do #wait for insert
    IFS=":" read -ra fields <<< "$line"
    for(( i=0;i<nfields;i++ ));do
      printf "%-15s" "${fields[i]}"
    done
    echo
  done < $data_file
}

function Select_Selected_Columns() {
  current_dir=$(pwd)
  local Dbname=$(basename "$current_dir")
  local table_list=$(ls "$current_dir")

  selected_table=$(yad --list --width=300 --height=250  \
      --title="List of Tables in $Dbname" \
      --text="Choose a Table:" \
      --column="Tables" $table_list)

  if [ $? -eq 1 ]; then
    Table_menu "$Dbname"
  fi

  selected_table=$(echo "$selected_table" | awk -F'|' '{print $1}')

  local table_name="$selected_table"
  local data_file="../$Dbname/$table_name/$table_name"

  headers=$(awk -F: 'NR>3 {print $1}' "$data_file.meta")
  nfields=$(awk -F: 'NR>3 {print NR-3":" $1}' "$data_file.meta")
  wcl=$(awk 'END {print NR}' "$data_file")

  checklist_options=()
  for header in $headers; do
    checklist_options+=(FALSE "$header")
  done

  selected_headers=$(yad --list --width=300 --height=250 \
    --title="Columns" \
    --text="Choose the Columns you want to select :" \
    --checklist \
    --column="Check" \
    --column="Column" \
    "${checklist_options[@]}")

  checklist_options=()

  if [ $? -eq 0 ]; then
    selected_headers_arr=$(echo "$selected_headers" | sed 's/^TRUE//g' | sed 's/^FALSE//g' | tr '|' '\n' | sed '/^$/d')

  f=()
  for selected_header in $selected_headers_arr; do
    printf "%-15s" "$selected_header"
    index=$(echo "$nfields" | grep -n "$selected_header" | cut -d ':' -f 1)
    f+=("$index")
  done
  echo
  for header in $selected_header; do
    printf "%-15s" "------------------------------"
  done
  echo  
  readarray -t lines < "$data_file"

  for line in "${lines[@]}"; do
    IFS=":" read -ra fields <<< "$line"
    
    for index in "${f[@]}"; do
      fd=${fields[$((index-1))]}
      printf "%-15s" "$fd"
    done
    echo
  done
fi
}

function data_type {
  shopt -s extglob

  input=$*
  email_pattern="^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$"
  str="^[a-zA-Z0-9 ]{0,255}$"

  if [[ $input =~ ^-?[0-9]+$ ]]; then
    echo "int"
  elif [[ $input =~ ^[-+]?[0-9]+\.?[0-9]*$ ]]; then
    echo "float"
  elif [[ $input =~ $str ]]; then
    echo "varchar"
  elif [[ $input =~ $email_pattern ]]; then
    echo "email"
  else
    echo "text"
  fi
}

function data_type_match {
  expected_data_type=$1
  lower_expected=$(echo "$expected_data_type" | awk '{print tolower($0)}')
  shift 
  data_type=$(data_type "$*")

  if [ "$lower_expected" == "$data_type" ]; then
    echo "true"
  else
    echo "false"
  fi
}

function check_for_unique {
    col=$1
    file=$2
    shift 2
    data=$*
    count=$(cat $file | cut -d ':' -f $col | grep -i ^"$data"$ | wc -l)
    if [ $count -eq 0 ]
    then
        echo true
    else
        echo false
    fi
}

function check_for_not_null {
  input=$*
  if [ -z "$input" ]
  then
      echo false    
  else
      echo true
  fi
}

function check_for_pk {
  col=$1
  file=$2
  shift 2
  data=$*
  rtrn=$(check_for_not_null $data)
  if [ $rtrn == true ]
  then
    rtrn=$(check_for_unique "$col" "$file" "$data")
    if [ "$rtrn" == true ]
    then
      echo true
    else
      echo false
    fi
  else
      echo false
  fi
}

function check_if_col_exists {
  meta_data_file=$1
  col_name=$2
  col_num=`cat $meta_data_file|cut -d : -f 1 |grep -n ^$col_name$`
  if [ -z $col_num ]
  then
      echo "false"
  else
    num=`echo $col_num | cut -d : -f 1`
    num=$((num-3))
    echo $num
  fi
}

function where {
    data_file_path=$1
    col=$2
    cond=$3
    shift 3
    value=$*
    cat $data_file_path|awk -F ":" -v col=$col -v cond=${cond} -v value="$value" '{
    IGNORECASE=1
    if($col == value && (cond == "==" || cond == "="))
    {print $0;}
    else if($col >= value && cond == ">=")
    {print $0}
    else if($col <= value && cond == "<=")
    {print $0}
    else if($col != value && cond == "!=")
    {print $0}
    else if($col > value && cond == ">")
    {print $0}
    else if($col < value && cond == "<")
    {print $0}
    }' 
}
#where min/khalid 4 == 5 > ./update.tmp

function SelectAllx() {
  
  local table_name="$1"
  local current_dir=$(pwd)
  local Dbname=$(basename "$current_dir")
  local data_file="../$Dbname/$table_name/$table_name"
  
  if [ ! -f "$data_file" ]; then
    yad --error --width=400 --height=100 --text="Table $table_name does not exist." 2>/dev/null
    return 1
  fi
  
  local headers=$(awk -F: 'NR>3 {print $1}' "$data_file.meta")
  local nfields=$(awk -F: 'NR==2 {print $2}' "$data_file.meta")

  # Print the table headers
  for header in $headers; do
    printf "%-15s" "$header"
  done
  echo
  for header in $headers; do
    printf "%-15s" "---------------"
  done
  echo

  # Print the table data
  while IFS= read -r line || [[ -n "$line" ]]; do
    IFS=":" read -ra fields <<< "$line"
    for ((i = 0; i < nfields; i++)); do
      printf "%-15s" "${fields[i]}"
    done
    echo
  done < "$data_file"
}
